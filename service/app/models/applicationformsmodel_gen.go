// Code generated by goctl. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	applicationFormsFieldNames          = builder.RawFieldNames(&ApplicationForms{})
	applicationFormsRows                = strings.Join(applicationFormsFieldNames, ",")
	applicationFormsRowsExpectAutoSet   = strings.Join(stringx.Remove(applicationFormsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	applicationFormsRowsWithPlaceHolder = strings.Join(stringx.Remove(applicationFormsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	applicationFormsModel interface {
		Insert(ctx context.Context, data *ApplicationForms) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ApplicationForms, error)
		FindOneByUserId(ctx context.Context, userId int64) (*ApplicationForms, error)
		Update(ctx context.Context, data *ApplicationForms) error
		Delete(ctx context.Context, id int64) error
	}

	defaultApplicationFormsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ApplicationForms struct {
		Id           int64     `db:"id"` // 申请表编号
		CreateTime   time.Time `db:"create_time"`
		UpdateTime   time.Time `db:"update_time"`
		DeleteTime   time.Time `db:"delete_time"`
		UserId       int64     `db:"user_id"`       // 申请人id
		Mobile       string    `db:"mobile"`        // 电话
		Username     string    `db:"username"`      // 用户名称
		Sex          int64     `db:"sex"`           // 性别 0-男 1-女
		Address      string    `db:"address"`       // 地址
		Birthday     string    `db:"birthday"`      // 生日 xxxx-xx-xx
		Email        string    `db:"email"`         // 邮箱
		Status       int64     `db:"status"`        // 申请表状态 0-待审批 1-已通过 2-不合格
		OperatorId   int64     `db:"operator_id"`   // 操作人id
		OperatorName string    `db:"operator_name"` // 操作人姓名
	}
)

func newApplicationFormsModel(conn sqlx.SqlConn) *defaultApplicationFormsModel {
	return &defaultApplicationFormsModel{
		conn:  conn,
		table: "`application_forms`",
	}
}

func (m *defaultApplicationFormsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultApplicationFormsModel) FindOne(ctx context.Context, id int64) (*ApplicationForms, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", applicationFormsRows, m.table)
	var resp ApplicationForms
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultApplicationFormsModel) FindOneByUserId(ctx context.Context, userId int64) (*ApplicationForms, error) {
	var resp ApplicationForms
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", applicationFormsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultApplicationFormsModel) Insert(ctx context.Context, data *ApplicationForms) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, applicationFormsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeleteTime, data.UserId, data.Mobile, data.Username, data.Sex, data.Address, data.Birthday, data.Email, data.Status, data.OperatorId, data.OperatorName)
	return ret, err
}

func (m *defaultApplicationFormsModel) Update(ctx context.Context, newData *ApplicationForms) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, applicationFormsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.DeleteTime, newData.UserId, newData.Mobile, newData.Username, newData.Sex, newData.Address, newData.Birthday, newData.Email, newData.Status, newData.OperatorId, newData.OperatorName, newData.Id)
	return err
}

func (m *defaultApplicationFormsModel) tableName() string {
	return m.table
}
