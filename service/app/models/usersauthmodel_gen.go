// Code generated by goctl. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	usersAuthFieldNames          = builder.RawFieldNames(&UsersAuth{})
	usersAuthRows                = strings.Join(usersAuthFieldNames, ",")
	usersAuthRowsExpectAutoSet   = strings.Join(stringx.Remove(usersAuthFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	usersAuthRowsWithPlaceHolder = strings.Join(stringx.Remove(usersAuthFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	usersAuthModel interface {
		Insert(ctx context.Context, data *UsersAuth) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UsersAuth, error)
		FindOneByAuthTypeAuthKey(ctx context.Context, authType string, authKey string) (*UsersAuth, error)
		FindOneByUserIdAuthType(ctx context.Context, userId int64, authType string) (*UsersAuth, error)
		Update(ctx context.Context, data *UsersAuth) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUsersAuthModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UsersAuth struct {
		Id         int64     `db:"id"`
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		DeleteTime time.Time `db:"delete_time"`
		UserId     int64     `db:"user_id"`
		AuthKey    string    `db:"auth_key"`  // 平台唯一id
		AuthType   string    `db:"auth_type"` // 平台类型
	}
)

func newUsersAuthModel(conn sqlx.SqlConn) *defaultUsersAuthModel {
	return &defaultUsersAuthModel{
		conn:  conn,
		table: "`users_auth`",
	}
}

func (m *defaultUsersAuthModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUsersAuthModel) FindOne(ctx context.Context, id int64) (*UsersAuth, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", usersAuthRows, m.table)
	var resp UsersAuth
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersAuthModel) FindOneByAuthTypeAuthKey(ctx context.Context, authType string, authKey string) (*UsersAuth, error) {
	var resp UsersAuth
	query := fmt.Sprintf("select %s from %s where `auth_type` = ? and `auth_key` = ? limit 1", usersAuthRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, authType, authKey)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersAuthModel) FindOneByUserIdAuthType(ctx context.Context, userId int64, authType string) (*UsersAuth, error) {
	var resp UsersAuth
	query := fmt.Sprintf("select %s from %s where `user_id` = ? and `auth_type` = ? limit 1", usersAuthRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId, authType)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersAuthModel) Insert(ctx context.Context, data *UsersAuth) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, usersAuthRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeleteTime, data.UserId, data.AuthKey, data.AuthType)
	return ret, err
}

func (m *defaultUsersAuthModel) Update(ctx context.Context, newData *UsersAuth) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, usersAuthRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.DeleteTime, newData.UserId, newData.AuthKey, newData.AuthType, newData.Id)
	return err
}

func (m *defaultUsersAuthModel) tableName() string {
	return m.table
}
