// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	application "management-system/service/app/api/internal/handler/application"
	rescue "management-system/service/app/api/internal/handler/rescue"
	role "management-system/service/app/api/internal/handler/role"
	user "management-system/service/app/api/internal/handler/user"
	"management-system/service/app/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/register",
				Handler: user.RegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/login",
				Handler: user.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/wxMiniAuth",
				Handler: user.WXMiniAuthHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/importexcel",
				Handler: user.ImportExcelHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/info",
				Handler: user.UserInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/getallapplicant",
				Handler: user.GetAllApplicantHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/uploadavatar",
				Handler: user.UploadAvatarHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/edit",
				Handler: user.EditUserInfoHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/role/viewchangelist",
				Handler: role.RoleChangeListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/role/change",
				Handler: role.ChangeRoleHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/rescue/auth",
				Handler: rescue.AuthRescueInfoHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/rescue/push",
				Handler: rescue.PushRescueInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/rescue/pushwithstatus",
				Handler: rescue.PushRescueInfoWithStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/rescue/destroytoken",
				Handler: rescue.DestroyTokenHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuthForPush.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/rescue/getrescueinfo",
				Handler: rescue.GetRescueInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/rescue/getrescueinfobyarea",
				Handler: rescue.GetRescueInfoByAreaHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/application/form",
				Handler: application.GetMyApplicationHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/application/edit",
				Handler: application.EditFormHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/application/forms",
				Handler: application.GetApplicationHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/application/process",
				Handler: application.ProcessHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/application/status",
				Handler: application.GetByStatusHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)
}
